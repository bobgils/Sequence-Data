// FILE: linkplus.cxx
// IMPLEMENTS: The 14 functions of the expanded linked list toolkit.
// The four new functions implemented at the bottom of
// the file were implemented by __________(your name and email address)____.

#include <assert.h>    // Provides assert
#include <stdlib.h>    // Provides NULL and size_t

using namespace std;

//prototypes for list toolkit
template <class Item>
std::size_t list_length(Node<Item>* );
template <class Item>
void list_head_insert(Node<Item>*& , const typename Sequence<Item>::value_type& );
template <class Item>
void list_insert(Node<Item>* , const typename Sequence<Item>::value_type& );
template <class Item>
Node<Item>* list_search(Node<Item>* , const typename Sequence<Item>::value_type& );
template <class Item>
void list_head_remove(Node<Item>*& );
template <class Item>
void list_remove(Node<Item>* );
template <class Item>
void list_copy(const Node<Item>* , Node<Item>*& , Node<Item>*& );
template <class Item>
void list_piece(Node<Item>* , Node<Item>* , Node<Item>*& , Node<Item>*& );
template <class Item>
std::size_t list_occurrences(Node<Item>* , const typename Sequence<Item>::value_type& );
template <class Item>
typename Sequence<Item>::value_type list_remove_at(Node<Item>*& , size_t );

template <class Item>
size_t list_length(Node<Item>* head_ptr)
{
    size_t answer = 0;

    for (head_ptr = head_ptr; head_ptr != NULL; head_ptr = head_ptr->link())
        answer++;

    return answer;
}

template <class Item>
void list_head_insert(Node<Item>*& head_ptr, const typename Sequence<Item>::value_type& entry)
{
    Node<Item> *insert_ptr;

    insert_ptr = new Node<Item>();
    insert_ptr->set_data(entry);
    insert_ptr->set_link(head_ptr);
    head_ptr = insert_ptr;
}

template <class Item>
void list_insert(Node<Item>* previous_ptr, const typename Sequence<Item>::value_type& entry) 
{
    Node<Item> *insert_ptr;
    
    insert_ptr = new Node<Item>() ;
    insert_ptr->set_data(entry);
    insert_ptr->set_link(previous_ptr->link());
    previous_ptr->set_link(insert_ptr);
}

template <class Item>
Node<Item>* list_search(Node<Item>* head_ptr, const typename Sequence<Item>::value_type& target) 
// Library facilities used: stdlib.h
{
    Node<Item> *cursor;
   
    for (cursor = head_ptr; cursor != NULL; cursor = cursor->link())
        if (target == cursor->data())
            return cursor;
    return NULL;
}

template <class Item>
Node<Item>* list_locate(Node<Item>* head_ptr, size_t position) 
// Library facilities used: assert.h, stdlib.h
{
    Node<Item> *cursor;
    size_t i;
    
    assert (0 < position);
    cursor = head_ptr;
    for (i = 1; (i < position) && (cursor != NULL); i++)
        cursor = cursor->link();
    return cursor;
}

template <class Item>
void list_head_remove(Node<Item>*& head_ptr)
{
    Node<Item> *remove_ptr;

    remove_ptr = head_ptr;
    head_ptr = head_ptr->link();
    delete remove_ptr;
}

template <class Item>
void list_remove(Node<Item>* previous_ptr)
{
    Node<Item> *remove_ptr;

    remove_ptr = previous_ptr->link();
    previous_ptr->set_link(remove_ptr->link());
    delete remove_ptr;
}

template <class Item>
void list_copy(const Node<Item>* source_ptr, Node<Item>*& head_ptr, Node<Item>*& tail_ptr) 
// Library facilities used: stdlib.h
{
    head_ptr = NULL;
    tail_ptr = NULL;

    // Handle the case of the empty list
    if (source_ptr == NULL)
        return;
    
    // Make the head node for the newly created list, and put data in it
    list_head_insert(head_ptr, source_ptr->data());
    tail_ptr = head_ptr;
    
    // Copy the rest of the nodes one at a time, adding at the tail of new list
    for (source_ptr = source_ptr->link(); source_ptr != NULL; source_ptr = source_ptr->link())
    {
        list_insert(tail_ptr, source_ptr->data());
        tail_ptr = tail_ptr->link();
    }
}

template <class Item>
void list_piece(Node<Item>* start_ptr, Node<Item>* end_ptr, Node<Item>*& head_ptr, Node<Item>*& tail_ptr)
// Library facilities used: stdlib.h
{
    head_ptr = NULL;
    tail_ptr = NULL;

    // Handle the case of the empty list
    if (start_ptr == NULL)
        return;
    
    // Make the head node for the newly created list, and put data in it
    list_head_insert(head_ptr, start_ptr->data());
    tail_ptr = head_ptr;
    if (start_ptr == end_ptr)
        return;
    
    // Copy the rest of the nodes one at a time, adding at the tail of new list
    for (start_ptr = start_ptr->link(); start_ptr != NULL; start_ptr = start_ptr->link())
    {
        list_insert(tail_ptr, start_ptr->data());
        tail_ptr = tail_ptr->link();
        if (start_ptr == end_ptr) 
            return;
    }
}

template <class Item>
size_t list_occurrences(Node<Item>* head_ptr, const typename Sequence<Item>::value_type& target)
{
    size_t answer = 0;

    for (head_ptr = list_search(head_ptr, target);
	 head_ptr != NULL;
	 head_ptr = list_search(head_ptr->link(), target))
	answer++;
    
    return answer;
}

template <class Item>
void list_insert_at(Node<Item>*& head_ptr, const Item& entry, size_t position)
{
    assert(position > 0);
    Node<Item> *precursor;
    
    if (position == 1)
	list_head_insert(head_ptr, entry);
    else
    {
	precursor = list_locate(head_ptr, position-1);
	assert(precursor != NULL);
	list_insert(precursor, entry);
    }
}

template <class Item>
Item list_remove_at(Node<Item>*& head_ptr, size_t position)
{
    assert(position > 0);
    Node<Item> *precursor;
    Item answer;
    
    if (position == 1)
    {
	assert(head_ptr != NULL);
	answer = head_ptr->data();
	list_head_remove(head_ptr);
    }
    else
    {
	precursor = list_locate(head_ptr, position-1);
	assert(precursor != NULL);
	assert(precursor->link() != NULL);
	answer = precursor->link()->data();
	list_remove(precursor);
    }
    return answer;
}

template <class Item>
Node<Item>* list_copy_segment(Node<Item>* head_ptr, size_t start, size_t finish)
{
    Node<Item> *start_ptr;
    Node<Item> *finish_ptr;
    Node<Item> *new_head;
    Node<Item> *new_tail;
    
    assert(start <= finish);
    start_ptr = list_locate(head_ptr, start);
    assert(start_ptr != NULL);
    finish_ptr = list_locate(start_ptr, finish-start+1);
    assert(finish_ptr != NULL);
    list_piece(start_ptr, finish_ptr, new_head, new_tail);
    return new_head;
}

template <class Item>
void list_clear(Node<Item>*& head_ptr)
// Library facilities used: stdlib.h
{
    while (head_ptr != NULL)
        list_head_remove(head_ptr);
}
